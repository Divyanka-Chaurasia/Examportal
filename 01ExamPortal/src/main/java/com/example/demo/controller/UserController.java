package com.example.demo.controller;
import java.security.Principal;
import java.util.HashSet;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.example.demo.Service.UserService;
import com.example.demo.entity.Role;
import com.example.demo.entity.User;
import com.example.demo.entity.UserRole;
import com.example.demo.payload.UserRequest;
import com.example.demo.payload.UserResponse;
import com.example.demo.util.jwtUtils;
@RestController
@RequestMapping("/user")
@CrossOrigin("*")
public class UserController {

	
	@Autowired
	private UserService userService;
	
	@Autowired
	private jwtUtils jwtUtils;
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	@Autowired
	private UserDetailsService userDetailsService;	
	/***
	 * for creating user
	 * @throws Exception 
	 */
	@PostMapping("/")
	public User createUser(@RequestBody User user) throws Exception
	{
		user.setProfileIMG("profile.jpg");
		Set<UserRole> roles = new HashSet<>();
		
		Role role = new Role();
		role.setRoleId(46L);
		role.setRoleName("USER");
		
		UserRole userRole = new UserRole();
		userRole.setUser(user);
		userRole.setRole(role);
		
		roles.add(userRole);		
		return this.userService.createUser(user, roles);
	}		
	/***
	 * 
	 * @param username get user by name
	 * @return
	 */
	@GetMapping("/get/{username}")
	public User getUser(@PathVariable("username") String username)
	{
		System.err.println("get");
		return this.userService.getUser(username);
	}		
	/***
	 * 
	 * @param  delete user by id
	 */	
	@DeleteMapping("/{id}")
	public void deleteUser(@PathVariable("id") Long id)
	{
		this.userService.deleteUser(id);
	}
	@PostMapping("/login/generate-token")
	public ResponseEntity<UserResponse> loginUser(@RequestBody UserRequest userRequest)
	{
		authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(userRequest.getUserName(), userRequest.getPassWord()));
	    String tokenRequest = jwtUtils.genrateToken(userRequest.getUserName());
	    return ResponseEntity.ok(new UserResponse(tokenRequest,"generated by divyanka"));
	}	
	//returns the details of current user
	@GetMapping("/current-user")
	public User currentUser(Principal principal)
	{
	   return userService.getUser(principal.getName());
	}
}
